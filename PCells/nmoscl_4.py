#
# Import the db 
#
from ui import *
#
# The entry point
#
def nmoscl_4(cv, type="dio", model = "nmoscl_4") :
    lib = cv.lib()
    tech = lib.tech()
    dbu = lib.dbuPerUU()
    #
    # Layer rules
    #
    cont_width = int(0.16 * dbu)
    cont_space = int(0.2 * dbu)
    activ_en_cont = int(0.07 * dbu)
    via_width = int(0.19 * dbu)
    via_space = int(0.29 * dbu)
    metal_en_via = int(0.005 * dbu)
    #
    # Creating the device
    #
    activ_layer = tech.getLayerNum("Activ", "drawing")
    psd_layer = tech.getLayerNum("pSD", "drawing")
    nwell_layer = tech.getLayerNum("NWell", "drawing")
    nwell_layer = tech.getLayerNum("NWell", "drawing")
    cont_layer = tech.getLayerNum("Cont", "drawing")
    metal1_layer = tech.getLayerNum("Metal1", "drawing")
    via1_layer = tech.getLayerNum("Via1", "drawing")
    metal2_layer = tech.getLayerNum("Metal2", "drawing")
    via2_layer = tech.getLayerNum("Via2", "drawing")
    metal3_layer = tech.getLayerNum("Metal3", "drawing")
    recog_layer = tech.getLayerNum("Recog", "esd")
    text_layer = tech.getLayerNum("TEXT", "drawing")
    gatpoly_layer = tech.getLayerNum("GatPoly", "drawing")
    nbulay_layer = tech.getLayerNum("nBuLay", "drawing")
    salblock_layer = tech.getLayerNum("SalBlock", "drawing")
    thickgateox_layer = tech.getLayerNum("ThickGateOx", "drawing")
    recog_layer = tech.getLayerNum("Recog", "drawing")
    recog_esd_layer = tech.getLayerNum("Recog", "esd")
    #
    # Creating Gate
    #
    n_points = 100
    xgp = intarray(n_points)
    ygp = intarray(n_points)
    xgp[0] = 0
    ygp[0] = 0
    xgp[1] = int(63.1 * dbu)
    ygp[1] = ygp[0]
    xgp[2] = xgp[1]
    ygp[2] = int(0.71 * dbu)
    xgp[3] = int(xgp[2] - 0.77 * dbu)
    ygp[3] = ygp[2]
    xgp[4] = xgp[3]
    ygp[4] = int(15.96 * dbu)
    xgp[5] = int(xgp[4] - 0.36 * dbu)
    ygp[5] = ygp[4]
    xgp[6] = xgp[5]
    ygp[6] = ygp[2]
    xgp[7] = int(xgp[6] - 2.85 * dbu)
    ygp[7] = ygp[2]
    xgp[8] = xgp[7]
    ygp[8] = ygp[4]
    xgp[9] = int(xgp[8] - 0.36 * dbu)
    ygp[9] = ygp[4]
    xgp[10] = xgp[9]
    ygp[10] = ygp[2]
    xgp[11] = int(xgp[10] - 1.75 * dbu)
    ygp[11] = ygp[2]
    xgp[12] = xgp[11]
    ygp[12] = ygp[4]
    xgp[13] = int(xgp[12] - 0.36 * dbu)
    ygp[13] = ygp[4]
    xgp[14] = xgp[13]
    ygp[14] = ygp[2]
    xgp[15] = int(xgp[14] - 2.85 * dbu)
    ygp[15] = ygp[2]
    xgp[16] = xgp[15]
    ygp[16] = ygp[4]
    xgp[17] = int(xgp[16] - 0.36 * dbu)
    ygp[17] = ygp[4]
    xgp[18] = xgp[17]
    ygp[18] = ygp[2]
    xgp[19] = int(xgp[18] - 1.75 * dbu)
    ygp[19] = ygp[2]
    xgp[20] = xgp[19]
    ygp[20] = ygp[4]
    xgp[21] = int(xgp[20] - 0.36 * dbu)
    ygp[21] = ygp[4]
    xgp[22] = xgp[21]
    ygp[22] = ygp[2]
    xgp[23] = int(xgp[22] - 2.85 * dbu)
    ygp[23] = ygp[2]
    xgp[24] = xgp[23]
    ygp[24] = ygp[4]
    xgp[25] = int(xgp[24] - 0.36 * dbu)
    ygp[25] = ygp[4]
    xgp[26] = xgp[25]
    ygp[26] = ygp[2]
    xgp[27] = int(xgp[26] - 1.75 * dbu)
    ygp[27] = ygp[2]
    xgp[28] = xgp[27]
    ygp[28] = ygp[4]
    xgp[29] = int(xgp[28] - 0.36 * dbu)
    ygp[29] = ygp[4]
    xgp[30] = xgp[29]
    ygp[30] = ygp[2]
    xgp[31] = int(xgp[30] - 2.85 * dbu)
    ygp[31] = ygp[2]
    xgp[32] = xgp[31]
    ygp[32] = ygp[4]
    xgp[33] = int(xgp[32] - 0.36 * dbu)
    ygp[33] = ygp[4]
    xgp[34] = xgp[33]
    ygp[34] = ygp[2]
    xgp[35] = int(xgp[34] - 1.75 * dbu)
    ygp[35] = ygp[2]
    xgp[36] = xgp[35]
    ygp[36] = ygp[4]
    xgp[37] = int(xgp[36] - 0.36 * dbu)
    ygp[37] = ygp[4]
    xgp[38] = xgp[37]
    ygp[38] = ygp[2]
    xgp[39] = int(xgp[38] - 2.85 * dbu)
    ygp[39] = ygp[2]
    xgp[40] = xgp[39]
    ygp[40] = ygp[4]
    xgp[41] = int(xgp[40] - 0.36 * dbu)
    ygp[41] = ygp[4]
    xgp[42] = xgp[41]
    ygp[42] = ygp[2]
    xgp[43] = int(xgp[42] - 1.75 * dbu)
    ygp[43] = ygp[2]
    xgp[44] = xgp[43]
    ygp[44] = ygp[4]
    xgp[45] = int(xgp[44] - 0.36 * dbu)
    ygp[45] = ygp[4]
    xgp[46] = xgp[45]
    ygp[46] = ygp[2]
    xgp[47] = int(xgp[46] - 2.85 * dbu)
    ygp[47] = ygp[2]
    xgp[48] = xgp[47]
    ygp[48] = ygp[4]
    xgp[49] = int(xgp[48] - 0.36 * dbu)
    ygp[49] = ygp[4]
    xgp[50] = xgp[49]
    ygp[50] = ygp[2]
    xgp[51] = int(xgp[50] - 1.75 * dbu)
    ygp[51] = ygp[2]
    xgp[52] = xgp[51]
    ygp[52] = ygp[4]
    xgp[53] = int(xgp[52] - 0.36 * dbu)
    ygp[53] = ygp[4]
    xgp[54] = xgp[53]
    ygp[54] = ygp[2]
    xgp[55] = int(xgp[54] - 2.85 * dbu)
    ygp[55] = ygp[2]
    xgp[56] = xgp[55]
    ygp[56] = ygp[4]
    xgp[57] = int(xgp[56] - 0.36 * dbu)
    ygp[57] = ygp[4]
    xgp[58] = xgp[57]
    ygp[58] = ygp[2]
    xgp[59] = int(xgp[58] - 1.75 * dbu)
    ygp[59] = ygp[2]
    xgp[60] = xgp[59]
    ygp[60] = ygp[4]
    xgp[61] = int(xgp[60] - 0.36 * dbu)
    ygp[61] = ygp[4]
    xgp[62] = xgp[61]
    ygp[62] = ygp[2]
    xgp[63] = int(xgp[62] - 2.85 * dbu)
    ygp[63] = ygp[2]
    xgp[64] = xgp[63]
    ygp[64] = ygp[4]
    xgp[65] = int(xgp[64] - 0.36 * dbu)
    ygp[65] = ygp[4]
    xgp[66] = xgp[65]
    ygp[66] = ygp[2]
    xgp[67] = int(xgp[66] - 1.75 * dbu)
    ygp[67] = ygp[2]
    xgp[68] = xgp[67]
    ygp[68] = ygp[4]
    xgp[69] = int(xgp[68] - 0.36 * dbu)
    ygp[69] = ygp[4]
    xgp[70] = xgp[69]
    ygp[70] = ygp[2]
    xgp[71] = int(xgp[70] - 2.85 * dbu)
    ygp[71] = ygp[2]
    xgp[72] = xgp[71]
    ygp[72] = ygp[4]
    xgp[73] = int(xgp[72] - 0.36 * dbu)
    ygp[73] = ygp[4]
    xgp[74] = xgp[73]
    ygp[74] = ygp[2]
    xgp[75] = int(xgp[74] - 1.75 * dbu)
    ygp[75] = ygp[2]
    xgp[76] = xgp[75]
    ygp[76] = ygp[4]
    xgp[77] = int(xgp[76] - 0.36 * dbu)
    ygp[77] = ygp[4]
    xgp[78] = xgp[77]
    ygp[78] = ygp[2]
    xgp[79] = int(xgp[78] - 2.85 * dbu)
    ygp[79] = ygp[2]
    xgp[80] = xgp[79]
    ygp[80] = ygp[4]
    xgp[81] = int(xgp[80] - 0.36 * dbu)
    ygp[81] = ygp[4]
    xgp[82] = xgp[81]
    ygp[82] = ygp[2]
    xgp[83] = int(xgp[82] - 1.75 * dbu)
    ygp[83] = ygp[2]
    xgp[84] = xgp[83]
    ygp[84] = ygp[4]
    xgp[85] = int(xgp[84] - 0.36 * dbu)
    ygp[85] = ygp[4]
    xgp[86] = xgp[85]
    ygp[86] = ygp[2]
    xgp[87] = int(xgp[86] - 2.85 * dbu)
    ygp[87] = ygp[2]
    xgp[88] = xgp[87]
    ygp[88] = ygp[4]
    xgp[89] = int(xgp[88] - 0.36 * dbu)
    ygp[89] = ygp[4]
    xgp[90] = xgp[89]
    ygp[90] = ygp[2]
    xgp[91] = int(xgp[90] - 1.75 * dbu)
    ygp[91] = ygp[2]
    xgp[92] = xgp[91]
    ygp[92] = ygp[4]
    xgp[93] = int(xgp[92] - 0.36 * dbu)
    ygp[93] = ygp[4]
    xgp[94] = xgp[93]
    ygp[94] = ygp[2]
    xgp[95] = int(xgp[94] - 2.85 * dbu)
    ygp[95] = ygp[2]
    xgp[96] = xgp[95]
    ygp[96] = ygp[4]
    xgp[97] =int(xgp[96] - 0.36 * dbu)
    ygp[97] = ygp[4]
    xgp[98] = xgp[97]
    ygp[98] = ygp[2]
    xgp[99] = xgp[0]
    ygp[99] = ygp[2]
    gatpoly = cv.dbCreatePolygon(xgp, ygp, n_points, gatpoly_layer) 
    xa0 = int(-0.965 *dbu)
    ya0 = int(1.32 * dbu)
    xa1 = int(63.535 * dbu)
    ya1 = int(15.33 * dbu)
    n_points = 12
    xa = intarray(n_points)
    ya = intarray(n_points)
    xa[0] = xa0
    ya[0] = int(ya0 + 0.01 * dbu)
    xa[1] = int(xa[0] + 0.005 * dbu)
    ya[1] = ya[0]
    xa[2] = xa[1]
    ya[2] = ya0
    xa[3] = int(xa1 - 0.05 * dbu)
    ya[3] = ya[2]
    xa[4] = xa[3]
    ya[4] = ya[0]
    xa[5] = xa1
    ya[5] = ya[4]
    xa[6] = xa[5]
    ya[6] = int(ya1 - 0.02 * dbu)
    xa[7] = int(xa[6] - 0.005 * dbu)
    ya[7] = ya[6]
    xa[8] =  xa[7]
    ya[8] = ya1
    xa[9] = xa[1]
    ya[9] = ya[8]
    xa[10] = xa[9]
    ya[10] = ya[7]
    xa[11] = xa[0]
    ya[11] = ya[10]
    activ = cv.dbCreatePolygon(xa, ya, n_points, activ_layer)
    xs0 = int(xa0 + 0.845 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 3.515 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 6.165 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 8.835 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 11.485 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 14.155 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 16.805 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 19.475 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 22.125 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 24.795 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 27.445 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 30.115 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 32.765 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 35.435 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 38.085 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 40.755 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 43.405 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 46.075 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 48.725 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 51.395 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 54.045 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 56.715 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 59.365 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    xs0 = int(xa0 + 62.035 *dbu)
    ys0 = int(ya0 - 0.36 * dbu)
    xs1 = int(xs0 + 1.62 * dbu)
    ys1 = int(ya1 + 0.33 * dbu)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, salblock_layer)
    for n in range(12) :
        xc0 = int(xgp[0] + 0.17 * dbu + n * 5.32 * dbu)
        yc0 = int(ygp[0] + 0.235 * dbu)
        xc1 = int(xc0 + cont_width)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        xc0 = int(xgp[0] + 0.51 * dbu + n * 5.32 * dbu)
        xc1 = int(xc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        xc0 = int(xgp[0] + 3.38 * dbu + n * 5.32 * dbu)
        xc1 = int(xc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        xc0 = int(xgp[0] + 3.72 * dbu + n * 5.32 * dbu)
        xc1 = int(xc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
    #
    # Creating Bulk
    #
    n_points = 8
    xac = intarray(n_points)
    yac = intarray(n_points)
    xac[0] = int(xa0 - 0.13 * dbu)
    yac[0] = int(ya1 + 1.485 * dbu)
    xac[1] = int(xac[0] + 64.74 * dbu)
    yac[1] = yac[0]
    xac[2] = xac[1]
    yac[2] = int(yac[0] + 0.015 * dbu)
    xac[3] = int(xac[1] + 0.025 * dbu)
    yac[3] = yac[2]
    xac[4] = xac[3]
    yac[4] = int(yac[3] + 0.63 * dbu)
    xac[5] = xac[1]
    yac[5] = yac[4]
    xac[6] = xac[1]
    yac[6] = int(yac[5] + 0.015 * dbu)
    xac[7] = xac[0]
    yac[7] = yac[6]
    activ = cv.dbCreatePolygon(xac, yac, n_points, activ_layer)
    p = Point(int(xac[0] + 1.29 * dbu), int(yac[0] + 0.195 * dbu))
    text = cv.dbCreateLabel(p, "sub!", R0, 0.2,  bottomLeft, text_layer)
    xp0 = int(xac[0] - 0.195 * dbu)
    yp0 = int(yac[0] - 0.36 * dbu)
    xp1 = int(xp0 + 65.29 * dbu)
    yp1 = int(yp0 + 1.32 * dbu)
    r = Rect(xp0, yp0, xp1, yp1)
    psd = cv.dbCreateRect(r, psd_layer)
    n_cont = int((xac[3] - xac[0] - 2 * activ_en_cont + cont_space ) / (cont_width + cont_space))
    for n in range(n_cont) :
        xc0 = int(xac[0] + activ_en_cont   + n * (cont_width + cont_space))
        yc0 = int(yac[0] + 0.07 * dbu)
        xc1 = int(xc0 + cont_width)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        yc0 = int(yac[0] + 0.43 * dbu)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
    #
    # Creating a Guard Ring
    #
    n_points = 26
    xa = intarray(n_points)
    ya = intarray(n_points)
    xa[0] = int(xa0 - 1.835 * dbu)
    ya[0] = int(ya0 - 2.62 * dbu)
    xa[1] = int(xa[0] + 0.01 * dbu) 
    ya[1] = ya[0]
    xa[2] = xa[1]
    ya[2] = int(ya[1] - 0.11 * dbu)
    xa[3] = int(xa[2] + 1.005 * dbu)
    ya[3] = ya[2]
    xa[4] = xa[3]
    ya[4] = int(ya[3] - 0.05 * dbu)
    xa[5] = int(xa[4] + 65.28 * dbu)
    ya[5] = ya[4]
    xa[6] = xa[5]
    ya[6] = ya[2]
    xa[7] = int(xa[6] + 2.005 * dbu)
    ya[7] = ya[2]
    xa[8] = xa[7]
    ya[8] = ya[0]
    xa[9] = int(xa[8] + 0.04 * dbu)
    ya[9] = ya[0]
    xa[10] = xa[9]
    ya[10] = int(ya[9] + 20.46 * dbu)
    xa[11] = xa[8]
    ya[11] = ya[10]
    xa[12] = xa[11]
    ya[12] = int(ya[11] + 0.16 * dbu)
    xa[13] = xa[5]
    ya[13] = ya[12]
    xa[14] = xa[13]
    ya[14] = int(ya[13] + 0.05 * dbu)
    xa[15] = xa[3]
    ya[15] = ya[14]
    xa[16] = xa[3]
    ya[16] = ya[12]
    xa[17] = xa[1]
    ya[17] = ya[12]
    xa[18] = xa[1]
    ya[18] = ya[10]
    xa[19] = xa[0]
    ya[19] = ya[10]
    xa[20] = xa[0]
    ya[20] = int(ya[19] - 19.94 * dbu)
    xa[21] = int(xa[20] + 0.66 * dbu)
    ya[21] = ya[20]
    xa[22] = xa[21]
    ya[22] = int(ya[21] + 19.47 * dbu)
    xa[23] = int(xa[22] + 67.01 * dbu)
    ya[23] = ya[22]
    xa[24] = xa[23]
    ya[24] = ya[20]
    xa[25] = xa[0]
    ya[25] = ya[20]
    activ = cv.dbCreatePolygon(xa, ya, n_points, activ_layer)
    n_points = 10
    xn = intarray(n_points)
    yn = intarray(n_points)
    xn[0] = int(xa0 - 2.245 * dbu)
    yn[0] = int(ya0 - 3.15 * dbu)
    xn[1] = int(xa1 + 2.385 * dbu)
    yn[1] = yn[0]
    xn[2] = xn[1]
    yn[2] = int(ya1 + 4.41 * dbu)
    xn[3] = xn[0]
    yn[3] = yn[2]
    xn[4] = xn[0]
    yn[4] = int(yn[0] + 1.41 * dbu)
    xn[5] = int (xn[0] + 1.38 * dbu)
    yn[5] = yn[4]
    xn[6] = xn[5]
    yn[6] = int(yn[2] - 1.41 * dbu)
    xn[7] = int(xn[1] - 1.38 * dbu)
    yn[7] = yn[6]
    xn[8] = xn[7]
    yn[8] = yn[4]
    xn[9] = xn[0]
    yn[9] = yn[4]
    nwell = cv.dbCreatePolygon(xn, yn, n_points, nwell_layer)
    metal1 = cv.dbCreatePolygon(xn, yn, n_points, metal1_layer)
    n_points = 58
    xm2 = intarray(n_points)
    ym2 = intarray(n_points)
    xm2[0] = int(xa0 - 2.245 * dbu)
    ym2[0] = int(ya0 - 3.15 * dbu)
    xm2[1] = int(xa1 + 2.385 * dbu)
    ym2[1] = ym2[0]
    xm2[2] = xm2[1]
    ym2[2] = int(ya1 + 4.41 * dbu)
    xm2[3] = xm2[0]
    ym2[3] = ym2[2]
    xm2[4] = xm2[0]
    ym2[4] = int(ya0 - 1.74 * dbu)
    xm2[5] = int(xm2[4] + 1.38 * dbu)
    ym2[5] = ym2[4]
    xm2[6] = xm2[5]
    ym2[6] = int(ym2[2] - 1.41 * dbu)
    xm2[7] = int(xa0 + 2.465 * dbu)
    ym2[7] = ym2[6]
    xm2[8] = xm2[7]
    ym2[8] = ym2[4]
    xm2[9] = int(xm2[8] + 1.05 * dbu)
    ym2[9] = ym2[4]
    xm2[10] = xm2[9]
    ym2[10] = ym2[6]
    xm2[11] = int(xa0 + 7.785 * dbu)
    ym2[11] = ym2[6]
    xm2[12] = xm2[11]
    ym2[12] = ym2[4]
    xm2[13] = int(xm2[12] + 1.05 * dbu)
    ym2[13] = ym2[4]
    xm2[14] = xm2[13]
    ym2[14] = ym2[6]
    xm2[15] = int(xa0 + 13.105 * dbu)
    ym2[15] = ym2[6]
    xm2[16] = xm2[15]
    ym2[16] = ym2[4]
    xm2[17] = int(xm2[16] + 1.05 * dbu)
    ym2[17] = ym2[4]
    xm2[18] = xm2[17]
    ym2[18] = ym2[6]
    xm2[19] = int(xa0 + 18.425 * dbu)
    ym2[19] = ym2[6]
    xm2[20] = xm2[19]
    ym2[20] = ym2[4]
    xm2[21] = int(xm2[20] + 1.05 * dbu)
    ym2[21] = ym2[4]
    xm2[22] = xm2[21]
    ym2[22] = ym2[6]
    xm2[23] = int(xa0 + 23.745 *dbu)
    ym2[23] = ym2[6]
    xm2[24] = xm2[23]
    ym2[24] = ym2[4]
    xm2[25] = int(xm2[24] + 1.05 * dbu)
    ym2[25] = ym2[4]
    xm2[26] = xm2[25]
    ym2[26] = ym2[6]
    xm2[27] = int(xa0 + 29.065 * dbu)
    ym2[27] = ym2[6]
    xm2[28] = xm2[27]
    ym2[28] = ym2[4]
    xm2[29] = int(xm2[28] + 1.05 * dbu)
    ym2[29] = ym2[4]
    xm2[30] = xm2[29]
    ym2[30] = ym2[6]
    
    xm2[31] = int(xm2[30] + 4.27  * dbu)
    ym2[31] = ym2[6]
    xm2[32] = xm2[31]
    ym2[32] = ym2[4]
    xm2[33] = int(xm2[32] + 1.05 * dbu)
    ym2[33] = ym2[4]
    xm2[34] = xm2[33]
    ym2[34] = ym2[6]
    
    xm2[35] = int(xm2[34] + 4.27  * dbu)
    ym2[35] = ym2[6]
    xm2[36] = xm2[35]
    ym2[36] = ym2[4]
    xm2[37] = int(xm2[36] + 1.05 * dbu)
    ym2[37] = ym2[4]
    xm2[38] = xm2[37]
    ym2[38] = ym2[6]
    
    xm2[39] = int(xm2[38] + 4.27  * dbu)
    ym2[39] = ym2[6]
    xm2[40] = xm2[39]
    ym2[40] = ym2[4]
    xm2[41] = int(xm2[40] + 1.05 * dbu)
    ym2[41] = ym2[4]
    xm2[42] = xm2[41]
    ym2[42] = ym2[6]
    
    xm2[43] = int(xm2[42] + 4.27  * dbu)
    ym2[43] = ym2[6]
    xm2[44] = xm2[43]
    ym2[44] = ym2[4]
    xm2[45] = int(xm2[44] + 1.05 * dbu)
    ym2[45] = ym2[4]
    xm2[46] = xm2[45]
    ym2[46] = ym2[6]
    
    xm2[47] = int(xm2[46] + 4.27  * dbu)
    ym2[47] = ym2[6]
    xm2[48] = xm2[47]
    ym2[48] = ym2[4]
    xm2[49] = int(xm2[48] + 1.05 * dbu)
    ym2[49] = ym2[4]
    xm2[50] = xm2[49]
    ym2[50] = ym2[6]
    
    xm2[51] = int(xm2[50] + 4.27  * dbu)
    ym2[51] = ym2[6]
    xm2[52] = xm2[51]
    ym2[52] = ym2[4]
    xm2[53] = int(xm2[52] + 1.05 * dbu)
    ym2[53] = ym2[4]
    xm2[54] = xm2[53]
    ym2[54] = ym2[6]
    
    xm2[55] = int(xa1 + 1.005 * dbu)
    ym2[55] = ym2[6]
    xm2[56] = xm2[55]
    ym2[56] = ym2[4]
    xm2[57] = xm2[0]
    ym2[57] = ym2[4]
    metal2 = cv.dbCreatePolygon(xm2, ym2, n_points, metal2_layer)
    n_points = 100
    xm3 = intarray(n_points)
    ym3 = intarray(n_points)
    xm3[0] = int(xa0 - 0.205 * dbu)
    ym3[0] = int(ya0 - 4.22 * dbu)
    xm3[1] = int(xa1 + 0.205 * dbu)
    ym3[1] = ym3[0]
    xm3[2] = xm3[1]
    ym3[2] = int(ya1 + 0.33 * dbu)
    xm3[3] = int(xm3[2] - 1.05 * dbu)
    ym3[3] = ym3[2]
    xm3[4] = xm3[3]
    ym3[4] = int(ya0 + 5.88 * dbu)
    xm3[5] = int(xm3[4] - 0.72 * dbu)
    ym3[5] = ym3[4]
    xm3[6] = xm3[5]
    ym3[6] = int(ya0 - 1.32 * dbu)
    xm3[7] = int(xm3[6] - 2.85 * dbu)
    ym3[7] = ym3[6]
    xm3[8] = xm3[7]
    ym3[8] = ym3[4]
    xm3[9] = int(xm3[8] - 0.7 * dbu)
    ym3[9] = ym3[4]
    xm3[10] = xm3[9]
    ym3[10] = ym3[2]
    xm3[11] = int(xm3[10] - 1.07 * dbu)
    ym3[11] = ym3[2]
    xm3[12] = xm3[11]
    ym3[12] = ym3[4]
    xm3[13] = int(xm3[12] - 0.7 * dbu)
    ym3[13] = ym3[4]
    xm3[14] = xm3[13]
    ym3[14] = ym3[6]
    xm3[15] = int(xm3[14] - 2.85 * dbu)
    ym3[15] = ym3[6]
    xm3[16] = xm3[15]
    ym3[16] = ym3[4]
    xm3[17] = int(xm3[16] - 0.7 * dbu)
    ym3[17] = ym3[4]
    xm3[18] = xm3[17]
    ym3[18] = ym3[2]
    xm3[19] = int(xm3[18] - 1.07 * dbu)
    ym3[19] = ym3[2]
    xm3[20] = xm3[19]
    ym3[20] = ym3[4]
    xm3[21] = int(xm3[20] - 0.7 * dbu)
    ym3[21] = ym3[4]
    xm3[22] = xm3[21]
    ym3[22] = ym3[6]
    xm3[23] = int(xm3[22] - 2.85 * dbu)
    ym3[23] = ym3[6]
    xm3[24] = xm3[23]
    ym3[24] = ym3[4]
    xm3[25] = int(xm3[24] - 0.7 * dbu)
    ym3[25] = ym3[4]
    xm3[26] = xm3[25]
    ym3[26] = ym3[2]
    xm3[27] = int(xm3[26] - 1.07 * dbu)
    ym3[27] = ym3[2]
    xm3[28] = xm3[27]
    ym3[28] = ym3[4]
    xm3[29] = int(xm3[28] - 0.7 * dbu)
    ym3[29] = ym3[4]
    xm3[30] = xm3[29]
    ym3[30] = ym3[6]
    xm3[31] = int(xm3[30] - 2.85 * dbu)
    ym3[31] = ym3[6]
    xm3[32] = xm3[31]
    ym3[32] = ym3[4]
    xm3[33] = int(xm3[32] - 0.7 * dbu)
    ym3[33] = ym3[4]
    xm3[34] = xm3[33]
    ym3[34] = ym3[2]
    xm3[35] = int(xm3[34] - 1.07 * dbu)
    ym3[35] = ym3[2]
    xm3[36] = xm3[35]
    ym3[36] = ym3[4]
    xm3[37] = int(xm3[36] - 0.7 * dbu)
    ym3[37] = ym3[4]
    xm3[38] = xm3[37]
    ym3[38] = ym3[6]
    xm3[39] = int(xm3[38] - 2.85 * dbu)
    ym3[39] = ym3[6]
    xm3[40] = xm3[39]
    ym3[40] = ym3[4]
    xm3[41] = int(xm3[40] - 0.7 * dbu)
    ym3[41] = ym3[4]
    xm3[42] = xm3[41]
    ym3[42] = ym3[2]
    xm3[43] = int(xm3[42] - 1.07 * dbu)
    ym3[43] = ym3[2]
    xm3[44] = xm3[43]
    ym3[44] = ym3[4]
    xm3[45] = int(xm3[44] - 0.7 * dbu)
    ym3[45] = ym3[4]
    xm3[46] = xm3[45]
    ym3[46] = ym3[6]
    
    xm3[47] = int(xm3[46] - 2.85 * dbu)
    ym3[47] = ym3[6]
    xm3[48] = xm3[47]
    ym3[48] = ym3[4]
    xm3[49] = int(xm3[48] - 0.7 * dbu)
    ym3[49] = ym3[4]
    xm3[50] = xm3[49]
    ym3[50] = ym3[2]
    xm3[51] = int(xm3[50] - 1.07 * dbu)
    ym3[51] = ym3[2]
    xm3[52] = xm3[51]
    ym3[52] = ym3[4]
    xm3[53] = int(xm3[52] - 0.7 * dbu)
    ym3[53] = ym3[4]
    xm3[54] = xm3[53]
    ym3[54] = ym3[6]
    
    xm3[55] = int(xm3[54] - 2.85 * dbu)
    ym3[55] = ym3[6]
    xm3[56] = xm3[55]
    ym3[56] = ym3[4]
    xm3[57] = int(xm3[56] - 0.7 * dbu)
    ym3[57] = ym3[4]
    xm3[58] = xm3[57]
    ym3[58] = ym3[2]
    xm3[59] = int(xm3[58] - 1.07 * dbu)
    ym3[59] = ym3[2]
    xm3[60] = xm3[59]
    ym3[60] = ym3[4]
    xm3[61] = int(xm3[60] - 0.7 * dbu)
    ym3[61] = ym3[4]
    xm3[62] = xm3[61]
    ym3[62] = ym3[6]
    
    xm3[63] = int(xm3[62] - 2.85 * dbu)
    ym3[63] = ym3[6]
    xm3[64] = xm3[63]
    ym3[64] = ym3[4]
    xm3[65] = int(xm3[64] - 0.7 * dbu)
    ym3[65] = ym3[4]
    xm3[66] = xm3[65]
    ym3[66] = ym3[2]
    xm3[67] = int(xm3[66] - 1.07 * dbu)
    ym3[67] = ym3[2]
    xm3[68] = xm3[67]
    ym3[68] = ym3[4]
    xm3[69] = int(xm3[68] - 0.7 * dbu)
    ym3[69] = ym3[4]
    xm3[70] = xm3[69]
    ym3[70] = ym3[6]
    
    xm3[71] = int(xm3[70] - 2.85 * dbu)
    ym3[71] = ym3[6]
    xm3[72] = xm3[71]
    ym3[72] = ym3[4]
    xm3[73] = int(xm3[72] - 0.7 * dbu)
    ym3[73] = ym3[4]
    xm3[74] = xm3[73]
    ym3[74] = ym3[2]
    xm3[75] = int(xm3[74] - 1.07 * dbu)
    ym3[75] = ym3[2]
    xm3[76] = xm3[75]
    ym3[76] = ym3[4]
    xm3[77] = int(xm3[76] - 0.7 * dbu)
    ym3[77] = ym3[4]
    xm3[78] = xm3[77]
    ym3[78] = ym3[6]
    
    xm3[79] = int(xm3[78] - 2.85 * dbu)
    ym3[79] = ym3[6]
    xm3[80] = xm3[79]
    ym3[80] = ym3[4]
    xm3[81] = int(xm3[80] - 0.7 * dbu)
    ym3[81] = ym3[4]
    xm3[82] = xm3[81]
    ym3[82] = ym3[2]
    xm3[83] = int(xm3[82] - 1.07 * dbu)
    ym3[83] = ym3[2]
    xm3[84] = xm3[83]
    ym3[84] = ym3[4]
    xm3[85] = int(xm3[84] - 0.7 * dbu)
    ym3[85] = ym3[4]
    xm3[86] = xm3[85]
    ym3[86] = ym3[6]
    
    xm3[87] = int(xm3[86] - 2.85 * dbu)
    ym3[87] = ym3[6]
    xm3[88] = xm3[87]
    ym3[88] = ym3[4]
    xm3[89] = int(xm3[88] - 0.7 * dbu)
    ym3[89] = ym3[4]
    xm3[90] = xm3[89]
    ym3[90] = ym3[2]
    xm3[91] = int(xm3[90] - 1.07 * dbu)
    ym3[91] = ym3[2]
    xm3[92] = xm3[91]
    ym3[92] = ym3[4]
    xm3[93] = int(xm3[92] - 0.7 * dbu)
    ym3[93] = ym3[4]
    xm3[94] = xm3[93]
    ym3[94] = ym3[6]
    
    xm3[95] = int(xm3[94] - 2.85 * dbu)
    ym3[95] = ym3[6]
    xm3[96] = xm3[95]
    ym3[96] = ym3[4]
    xm3[97] = int(xm3[96] - 0.72 * dbu)
    ym3[97] = ym3[4]
    xm3[98] = xm3[97]
    ym3[98] = ym3[2]
    xm3[99] = int(xm3[98] - 1.05 * dbu)
    ym3[99] = ym3[2]
    metal3 = cv.dbCreatePolygon(xm3, ym3, n_points, metal3_layer)
    net = cv.dbCreateNet("VSS")
    pin = cv.dbCreatePin("VSS", net, DB_PIN_INOUT)
    cv.dbCreatePort(pin, metal3)
    p = Point(int(xa0 + 1.03 * dbu), int(ya0 - 1.87 * dbu))
    text = cv.dbCreateLabel(p, "VSS", R0, 0.2,  topLeft, text_layer)
    n_points = 150
    xm3 = intarray(n_points)
    ym3 = intarray(n_points)
    xm3[0] = int(xa0 - 0.625 * dbu)
    ym3[0] = int(ya1 + 5.47 * dbu)
    xm3[1] = int(xa1 + 0.625 * dbu)
    ym3[1] = ym3[0]
    xm3[2] = xm3[1]
    ym3[2] = int(ya1 + 0.69 * dbu)

    xm3[3] = int(xm3[2] - 2.4 * dbu)
    ym3[3] = ym3[2]
    xm3[4] = xm3[3]
    ym3[4] = int(ya0 + 8.04 * dbu)
    xm3[5] = int(xm3[4] - 0.305 * dbu)
    ym3[5] = ym3[4]
    xm3[6] = xm3[5]
    ym3[6] = int(ya0 + 6.78 * dbu)
    xm3[7] = int(xm3[6] - 0.385 * dbu)
    ym3[7] = ym3[6]
    xm3[8] = xm3[7]
    ym3[8] = int(ya0 - 0.36 * dbu)
    xm3[9] = int(xm3[8] - 1.05 * dbu)
    ym3[9] = ym3[8]
    xm3[10] = xm3[9]
    ym3[10] = ym3[6]
    xm3[11] = int(xm3[10] - 0.365 * dbu)
    ym3[11] = ym3[6]
    xm3[12] = xm3[11]
    ym3[12] = ym3[4]
    xm3[13] = int(xm3[12] - 0.325 * dbu)
    ym3[13] = ym3[4]
    xm3[14] = xm3[13]
    ym3[14] = ym3[2]
    
    xm3[15] = xm3[13]
    ym3[15] = ym3[2]
    
    xm3[16] = int(xm3[15] - 2.89 * dbu)
    ym3[16] = ym3[2]
    xm3[17] = xm3[16]
    ym3[17] = ym3[4]
    xm3[18] = int(xm3[17] - 0.305 * dbu)
    ym3[18] = ym3[4]
    xm3[19] = xm3[18]
    ym3[19] = ym3[6]
    xm3[20] = int(xm3[19] - 0.385 * dbu)
    ym3[20] = ym3[6]
    xm3[21] = xm3[20]
    ym3[21] = ym3[8]
    xm3[22] = int(xm3[21] - 1.05 * dbu)
    ym3[22] = ym3[8]
    xm3[23] = xm3[22]
    ym3[23] = ym3[6]
    xm3[24] = int(xm3[23] - 0.365 * dbu)
    ym3[24] = ym3[6]
    xm3[25] = xm3[24]
    ym3[25] = ym3[4]
    xm3[26] = int(xm3[25] - 0.325 * dbu)
    ym3[26] = ym3[4]
    xm3[27] = xm3[26]
    ym3[27] = ym3[2]
    
    xm3[28] = int(xm3[27] - 2.89 * dbu)
    ym3[28] = ym3[2]
    xm3[29] = xm3[28]
    ym3[29] = ym3[4]
    xm3[30] = int(xm3[29] - 0.305 * dbu)
    ym3[30] = ym3[4]
    xm3[31] = xm3[30]
    ym3[31] = ym3[6]
    xm3[32] = int(xm3[31] - 0.385 * dbu)
    ym3[32] = ym3[6]
    xm3[33] = xm3[32]
    ym3[33] = ym3[8]
    xm3[34] = int(xm3[33] - 1.05 * dbu)
    ym3[34] = ym3[8]
    xm3[35] = xm3[34]
    ym3[35] = ym3[6]
    xm3[36] = int(xm3[35] - 0.365 * dbu)
    ym3[36] = ym3[6]
    xm3[37] = xm3[36]
    ym3[37] = ym3[4]
    xm3[38] = int(xm3[37] - 0.325 * dbu)
    ym3[38] = ym3[4]
    xm3[39] = xm3[38]
    ym3[39] = ym3[2]
    
    xm3[40] = int(xm3[39] - 2.89 * dbu)
    ym3[40] = ym3[2]
    xm3[41] = xm3[40]
    ym3[41] = ym3[4]
    xm3[42] = int(xm3[41] - 0.305 * dbu)
    ym3[42] = ym3[4]
    xm3[43] = xm3[42]
    ym3[43] = ym3[6]
    xm3[44] = int(xm3[43] - 0.385 * dbu)
    ym3[44] = ym3[6]
    xm3[45] = xm3[44]
    ym3[45] = ym3[8]
    xm3[46] = int(xm3[45] - 1.05 * dbu)
    ym3[46] = ym3[8]
    xm3[47] = xm3[46]
    ym3[47] = ym3[6]
    xm3[48] = int(xm3[47] - 0.365 * dbu)
    ym3[48] = ym3[6]
    xm3[49] = xm3[48]
    ym3[49] = ym3[4]
    xm3[50] = int(xm3[49] - 0.325 * dbu)
    ym3[50] = ym3[4]
    xm3[51] = xm3[50]
    ym3[51] = ym3[2]
    
    xm3[52] = int(xm3[51] - 2.89 * dbu)
    ym3[52] = ym3[2]
    xm3[53] = xm3[52]
    ym3[53] = ym3[4]
    xm3[54] = int(xm3[53] - 0.305 * dbu)
    ym3[54] = ym3[4]
    xm3[55] = xm3[54]
    ym3[55] = ym3[6]
    xm3[56] = int(xm3[55] - 0.385 * dbu)
    ym3[56] = ym3[6]
    xm3[57] = xm3[56]
    ym3[57] = ym3[8]
    xm3[58] = int(xm3[57] - 1.05 * dbu)
    ym3[58] = ym3[8]
    xm3[59] = xm3[58]
    ym3[59] = ym3[6]
    xm3[60] = int(xm3[59] - 0.365 * dbu)
    ym3[60] = ym3[6]
    xm3[61] = xm3[60]
    ym3[61] = ym3[4]
    xm3[62] = int(xm3[61] - 0.325 * dbu)
    ym3[62] = ym3[4]
    xm3[63] = xm3[62]
    ym3[63] = ym3[2]
    
    xm3[64] = int(xm3[63] - 2.89 * dbu)
    ym3[64] = ym3[2]
    xm3[65] = xm3[64]
    ym3[65] = ym3[4]
    xm3[66] = int(xm3[65] - 0.305 * dbu)
    ym3[66] = ym3[4]
    xm3[67] = xm3[66]
    ym3[67] = ym3[6]
    xm3[68] = int(xm3[67] - 0.385 * dbu)
    ym3[68] = ym3[6]
    xm3[69] = xm3[68]
    ym3[69] = ym3[8]
    xm3[70] = int(xm3[69] - 1.05 * dbu)
    ym3[70] = ym3[8]
    xm3[71] = xm3[70]
    ym3[71] = ym3[6]
    xm3[72] = int(xm3[71] - 0.365 * dbu)
    ym3[72] = ym3[6]
    xm3[73] = xm3[72]
    ym3[73] = ym3[4]
    xm3[74] = int(xm3[73] - 0.325 * dbu)
    ym3[74] = ym3[4]
    xm3[75] = xm3[74]
    ym3[75] = ym3[2]
    
    xm3[76] = int(xm3[75] - 2.89 * dbu)
    ym3[76] = ym3[2]
    xm3[77] = xm3[76]
    ym3[77] = ym3[4]
    xm3[78] = int(xm3[77] - 0.305 * dbu)
    ym3[78] = ym3[4]
    xm3[79] = xm3[78]
    ym3[79] = ym3[6]
    xm3[80] = int(xm3[79] - 0.385 * dbu)
    ym3[80] = ym3[6]
    xm3[81] = xm3[80]
    ym3[81] = ym3[8]
    xm3[82] = int(xm3[81] - 1.05 * dbu)
    ym3[82] = ym3[8]
    xm3[83] = xm3[82]
    ym3[83] = ym3[6]
    xm3[84] = int(xm3[83] - 0.365 * dbu)
    ym3[84] = ym3[6]
    xm3[85] = xm3[84]
    ym3[85] = ym3[4]
    xm3[86] = int(xm3[85] - 0.325 * dbu)
    ym3[86] = ym3[4]
    xm3[87] = xm3[86]
    ym3[87] = ym3[2]
    
    xm3[88] = int(xm3[87] - 2.89 * dbu)
    ym3[88] = ym3[2]
    xm3[89] = xm3[88]
    ym3[89] = ym3[4]
    xm3[90] = int(xm3[89] - 0.305 * dbu)
    ym3[90] = ym3[4]
    xm3[91] = xm3[90]
    ym3[91] = ym3[6]
    xm3[92] = int(xm3[91] - 0.385 * dbu)
    ym3[92] = ym3[6]
    xm3[93] = xm3[92]
    ym3[93] = ym3[8]
    xm3[94] = int(xm3[93] - 1.05 * dbu)
    ym3[94] = ym3[8]
    xm3[95] = xm3[94]
    ym3[95] = ym3[6]
    xm3[96] = int(xm3[95] - 0.365 * dbu)
    ym3[96] = ym3[6]
    xm3[97] = xm3[96]
    ym3[97] = ym3[4]
    xm3[98] = int(xm3[97] - 0.325 * dbu)
    ym3[98] = ym3[4]
    xm3[99] = xm3[98]
    ym3[99] = ym3[2]
    
    xm3[100] = int(xm3[99] - 2.89 * dbu)
    ym3[100] = ym3[2]
    xm3[101] = xm3[100]
    ym3[101] = ym3[4]
    xm3[102] = int(xm3[101] - 0.305 * dbu)
    ym3[102] = ym3[4]
    xm3[103] = xm3[102]
    ym3[103] = ym3[6]
    xm3[104] = int(xm3[103] - 0.385 * dbu)
    ym3[104] = ym3[6]
    xm3[105] = xm3[104]
    ym3[105] = ym3[8]
    xm3[106] = int(xm3[105] - 1.05 * dbu)
    ym3[106] = ym3[8]
    xm3[107] = xm3[106]
    ym3[107] = ym3[6]
    xm3[108] = int(xm3[107] - 0.365 * dbu)
    ym3[108] = ym3[6]
    xm3[109] = xm3[108]
    ym3[109] = ym3[4]
    xm3[110] = int(xm3[109] - 0.325 * dbu)
    ym3[110] = ym3[4]
    xm3[111] = xm3[110]
    ym3[111] = ym3[2]
    
    xm3[112] = int(xm3[111] - 2.89 * dbu)
    ym3[112] = ym3[2]
    xm3[113] = xm3[112]
    ym3[113] = ym3[4]
    xm3[114] = int(xm3[113] - 0.305 * dbu)
    ym3[114] = ym3[4]
    xm3[115] = xm3[114]
    ym3[115] = ym3[6]
    xm3[116] = int(xm3[115] - 0.385 * dbu)
    ym3[116] = ym3[6]
    xm3[117] = xm3[116]
    ym3[117] = ym3[8]
    xm3[118] = int(xm3[117] - 1.05 * dbu)
    ym3[118] = ym3[8]
    xm3[119] = xm3[118]
    ym3[119] = ym3[6]
    xm3[120] = int(xm3[119] - 0.365 * dbu)
    ym3[120] = ym3[6]
    xm3[121] = xm3[120]
    ym3[121] = ym3[4]
    xm3[122] = int(xm3[121] - 0.325 * dbu)
    ym3[122] = ym3[4]
    xm3[123] = xm3[122]
    ym3[123] = ym3[2]
    
    xm3[124] = int(xm3[123] - 2.89 * dbu)
    ym3[124] = ym3[2]
    xm3[125] = xm3[124]
    ym3[125] = ym3[4]
    xm3[126] = int(xm3[125] - 0.305 * dbu)
    ym3[126] = ym3[4]
    xm3[127] = xm3[126]
    ym3[127] = ym3[6]
    xm3[128] = int(xm3[127] - 0.385 * dbu)
    ym3[128] = ym3[6]
    xm3[129] = xm3[128]
    ym3[129] = ym3[8]
    xm3[130] = int(xm3[129] - 1.05 * dbu)
    ym3[130] = ym3[8]
    xm3[131] = xm3[130]
    ym3[131] = ym3[6]
    xm3[132] = int(xm3[131] - 0.365 * dbu)
    ym3[132] = ym3[6]
    xm3[133] = xm3[132]
    ym3[133] = ym3[4]
    xm3[134] = int(xm3[133] - 0.325 * dbu)
    ym3[134] = ym3[4]
    xm3[135] = xm3[134]
    ym3[135] = ym3[2]
    
    xm3[136] = int(xm3[135] - 2.89 * dbu)
    ym3[136] = ym3[2]
    xm3[137] = xm3[136]
    ym3[137] = ym3[4]
    xm3[138] = int(xm3[137] - 0.305 * dbu)
    ym3[138] = ym3[4]
    xm3[139] = xm3[138]
    ym3[139] = ym3[6]
    xm3[140] = int(xm3[139] - 0.385 * dbu)
    ym3[140] = ym3[6]
    xm3[141] = xm3[140]
    ym3[141] = ym3[8]
    xm3[142] = int(xm3[141] - 1.05 * dbu)
    ym3[142] = ym3[8]
    xm3[143] = xm3[142]
    ym3[143] = ym3[6]
    xm3[144] = int(xm3[143] - 0.365 * dbu)
    ym3[144] = ym3[6]
    xm3[145] = xm3[144]
    ym3[145] = ym3[4]
    xm3[146] = int(xm3[145] - 0.325 * dbu)
    ym3[146] = ym3[4]
    xm3[147] = xm3[146]
    ym3[147] = ym3[2]
    
    xm3[148] = int(xm3[147] - 2.4 * dbu)
    ym3[148] = ym3[2]
    xm3[149] = xm3[0]
    ym3[149] = ym3[2]
    
    metal3 = cv.dbCreatePolygon(xm3, ym3, n_points, metal3_layer)
    net = cv.dbCreateNet("VDD")
    pin = cv.dbCreatePin("VDD", net, DB_PIN_INOUT)
    cv.dbCreatePort(pin, metal3)
    p = Point(int(xa0 + 0.69 * dbu), int(ya1 + 3.78 * dbu))
    text = cv.dbCreateLabel(p, "VDD", R0, 0.2,  bottomLeft, text_layer)
    
    xnb0 = int(xa0 - 1.885 * dbu)
    ynb0 = int(ya0 - 2.79 * dbu)
    xnb1 = int(xa1 + 2.025 * dbu)
    ynb1 = int(ya1 + 4.05 * dbu)
    r = Rect(xnb0, ynb0, xnb1, ynb1)
    nbulay = cv.dbCreateRect(r, nbulay_layer)
    n_cont = int((65.28 * dbu - 2 * activ_en_cont + cont_space + 0.02 * dbu) / (cont_width + cont_space + 0.02 * dbu))
    for n in range(n_cont) :
        xc0 = int(xa0 - 0.75 * dbu + n * (cont_width + cont_space + 0.02 * dbu))
        yc0 = int(ya0 - 2.71 * dbu)
        xc1 = int(xc0 + cont_width)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        yc0 = int(ya0 - 2.33 * dbu)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        yc0 = int(ya1 + 3.43 * dbu)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        yc0 = int(ya1 + 3.81 * dbu)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
    n_cont = int((20.46 * dbu - 2 * activ_en_cont + cont_space ) / (cont_width + cont_space))
    for n in range(n_cont) :
        xc0 = int(xa0 - 1.765 * dbu)
        yc0 = int(ya0 - 2.55 * dbu + n * (cont_width + cont_space))
        xc1 = int(xc0 + cont_width)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        xc0 = int(xa0 - 1.405 * dbu)
        xc1 = int(xc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        xc0 = int(xa1 + 1.415 * dbu)
        xc1 = int(xc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
        xc0 = int(xa1 + 1.775 * dbu)
        xc1 = int(xc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, cont_layer)
    n_via1 = int((65.96 * dbu - 2 * metal_en_via + via_space ) / (via_width + via_space))
    for n in range(n_via1) :
        xv0 = int(xa0 - 0.54 * dbu + n * (via_width + via_space))
        yv0 = int(ya0 - 2.765 * dbu)
        xv1 = int(xv0 + via_width)
        yv1 = int(yv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
        yv0 = int(ya0 - 2.285 * dbu)
        yv1 = int(yv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
        yv0 = int(ya1 + 3.325 * dbu)
        yv1 = int(yv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
        yv0 = int(ya1 + 3.805 * dbu)
        yv1 = int(yv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
    n_via1 = int((19.88 * dbu - 2 * metal_en_via + via_space ) / (via_width + via_space))
    for n in range(n_via1) :
        xv0 = int(xa0 - 1.84 * dbu)
        yv0 = int(ya0 - 2.245 * dbu + n * (via_width + via_space))
        xv1 = int(xv0 + via_width)
        yv1 = int(yv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
        xv0 = int(xa0 - 1.36 * dbu)
        xv1 = int(xv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
        xv0 = int(xa1 + 1.34 * dbu)
        xv1 = int(xv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
        xv0 = int(xa1 + 1.82 * dbu)
        xv1 = int(xv0 + via_width)
        r = Rect(xv0, yv0, xv1, yv1)
        via1 = cv.dbCreateRect(r, via1_layer)
    #
    xt0 = int(xa0 - 0.51 * dbu)
    yt0 = int(ya0 - 0.34 * dbu)
    xt1 = int(xa1 + 0.52 * dbu)
    yt1 = int(ya1 + 0.635 * dbu)
    r = Rect(xt0, yt0, xt1, yt1)
    thickgateox = cv.dbCreateRect(r, thickgateox_layer)
    #
    xr0 = int(xa0 - 2.245 * dbu)
    yr0 = int(ya0 - 3.15 * dbu)
    xr1 = int(xa1 + 2.385 * dbu)
    yr1 = int(ya1 + 4.41 * dbu)
    r = Rect(xr0, yr0, xr1, yr1)
    recog = cv.dbCreateRect(r, recog_layer)
    recog_esd = cv.dbCreateRect(r, recog_esd_layer)    
    #
    # Drain and Source
    #
    n_cont = int((ya1 - ya0 - 2 * activ_en_cont + cont_space ) / (cont_width + cont_space))
    for i in range(25):
        for n in range(n_cont) :
            xc0 = int(xa0 + 0.07 * dbu + i * 2.66 * dbu)
            yc0 = int(ya0 + 0.08 * dbu + n * (cont_width + cont_space))
            xc1 = int(xc0 + cont_width)
            yc1 = int(yc0 + cont_width)
            r = Rect(xc0, yc0, xc1, yc1)
            cont = cv.dbCreateRect(r, cont_layer)
            xc0 = int(xc0 + cont_width + cont_space)
            xc1 = int(xc0 + cont_width)
            r = Rect(xc0, yc0, xc1, yc1)
            cont = cv.dbCreateRect(r, cont_layer)
    n_via1 = int((14.25 * dbu - 2 * metal_en_via + via_space ) / (via_width + via_space))
    for i in range(25):
        for n in range(n_via1) :
            xv0 = int(xa0 - 0.015 * dbu + i * 2.66 * dbu)
            yv0 = int(ya0 - 0.075 * dbu + n * (via_width + via_space))
            xv1 = int(xv0 + via_width)
            yv1 = int(yv0 + via_width)
            r = Rect(xv0, yv0, xv1, yv1)
            via1 = cv.dbCreateRect(r, via1_layer)
            via2 = cv.dbCreateRect(r, via2_layer)
            xv0 = int(xv0 + via_width + via_space)
            xv1 = int(xv0 + via_width)
            r = Rect(xv0, yv0, xv1, yv1)
            via1 = cv.dbCreateRect(r, via1_layer)
            via2 = cv.dbCreateRect(r, via2_layer)
    n_points = 60
    xm1 = intarray(n_points)
    ym1 = intarray(n_points)
    xm1[0] = int(xa0 - 0.205 * dbu)
    ym1[0] = int(ya0 - 1.32 * dbu)
    xm1[1] = int(xa1 + 0.205 * dbu)
    ym1[1] = ym1[0]
    xm1[2] = xm1[1]
    ym1[2] = int(ya1 + 2.16 * dbu)
    xm1[3] = int(xm1[2] - 0.01 * dbu)
    ym1[3] = ym1[2]
    xm1[4] = xm1[3]
    ym1[4] = int(ym1[3] + 0.03 * dbu)
    
    xm1[5] = xm1[0]
    ym1[5] = ym1[4]
    xm1[6] = xm1[0]
    ym1[6] = int(ya0 - 0.69 * dbu)
    xm1[7] = int(xm1[6] + 1.07 * dbu)
    ym1[7] = ym1[6]
    xm1[8] = xm1[7]
    ym1[8] = int(ya1 + 1.5 * dbu)
    xm1[9] = int(xa0 + 5.115 * dbu)
    ym1[9] = ym1[8]
    xm1[10] = xm1[9]
    ym1[10] = ym1[6]
    xm1[11] = int(xm1[10] + 1.07 * dbu)
    ym1[11] = ym1[6]
    xm1[12] = xm1[11]
    ym1[12] = ym1[8]
    xm1[13] = int(xa0 + 10.435 * dbu)
    ym1[13] = ym1[8]
    xm1[14] = xm1[13]
    ym1[14] = ym1[6]
    xm1[15] = int(xm1[14] + 1.07 * dbu)
    ym1[15] = ym1[6]
    xm1[16] = xm1[15]
    ym1[16] = ym1[8]
    xm1[17] = int(xa0 + 15.755 * dbu)
    ym1[17] = ym1[8]
    xm1[18] = xm1[17]
    ym1[18] = ym1[6]
    xm1[19] = int(xm1[18] + 1.07 * dbu)
    ym1[19] = ym1[6]
    xm1[20] = xm1[19]
    ym1[20] = ym1[8]
    xm1[21] = int(xa0 + 21.075 * dbu)
    ym1[21] = ym1[8]
    xm1[22] = xm1[21]
    ym1[22] = ym1[6]
    xm1[23] = int(xm1[22] + 1.07 * dbu)
    ym1[23] = ym1[6]
    xm1[24] = xm1[23]
    ym1[24] = ym1[8]
    xm1[25] = int(xa0 + 26.395 *dbu)
    ym1[25] = ym1[8]
    xm1[26] = xm1[25]
    ym1[26] = ym1[6]
    xm1[27] = int(xm1[26] + 1.07 * dbu)
    ym1[27] = ym1[6]
    xm1[28] = xm1[27]
    ym1[28] = ym1[8]
    xm1[29] = int(xa0 + 31.715 * dbu)
    ym1[29] = ym1[8]
    xm1[30] = xm1[29]
    ym1[30] = ym1[6]
    xm1[31] = int(xm1[30] + 1.07 * dbu)
    ym1[31] = ym1[6]
    xm1[32] = xm1[31]
    ym1[32] = ym1[8]
    xm1[33] = int(xa0 + 37.035 * dbu)
    ym1[33] = ym1[8]
    xm1[34] = xm1[33]
    ym1[34] = ym1[6]
    xm1[35] = int(xm1[34] + 1.07 * dbu)
    ym1[35] = ym1[6]
    xm1[36] = xm1[35]
    ym1[36] = ym1[8]
    xm1[37] = int(xa0 + 37.035 * dbu)
    ym1[37] = ym1[8]
    xm1[38] = xm1[37]
    ym1[38] = ym1[6]
    xm1[39] = int(xm1[38] + 1.07 * dbu)
    ym1[39] = ym1[6]
    xm1[40] = xm1[39]
    ym1[40] = ym1[8]
    xm1[41] = int(xa0 + 42.355 * dbu)
    ym1[41] = ym1[8]
    xm1[42] = xm1[41]
    ym1[42] = ym1[6]
    xm1[43] = int(xm1[42] + 1.07 * dbu)
    ym1[43] = ym1[6]
    xm1[44] = xm1[43]
    ym1[44] = ym1[8]
    xm1[45] = int(xa0 + 47.675 * dbu)
    ym1[45] = ym1[8]
    xm1[46] = xm1[45]
    ym1[46] = ym1[6]
    xm1[47] = int(xm1[46] + 1.07 * dbu)
    ym1[47] = ym1[6]
    xm1[48] = xm1[47]
    ym1[48] = ym1[8]
    xm1[49] = int(xa0 + 52.995 * dbu)
    ym1[49] = ym1[8]
    xm1[50] = xm1[49]
    ym1[50] = ym1[6]
    xm1[51] = int(xm1[50] + 1.07 * dbu)
    ym1[51] = ym1[6]
    xm1[52] = xm1[51]
    ym1[52] = ym1[8]
    
    xm1[53] = int(xa0 + 58.315 * dbu)
    ym1[53] = ym1[8]
    xm1[54] = xm1[53]
    ym1[54] = ym1[6]
    xm1[55] = int(xm1[54] + 1.07 * dbu)
    ym1[55] = ym1[6]
    xm1[56] = xm1[55]
    ym1[56] = ym1[8]
    
    xm1[57] = int(xa0 + 63.655 * dbu)
    ym1[57] = ym1[8]
    xm1[58] = xm1[57]
    ym1[58] = ym1[6]
    xm1[59] = xm1[0]
    ym1[59] = ym1[6]
    metal1 = cv.dbCreatePolygon(xm1, ym1, n_points, metal1_layer)
    for n in range(12) :
        n_points = 8
        xm1 = intarray(n_points)
        ym1 = intarray(n_points)
        xm1[0] = int(xa0 + 2.465 * dbu + n * 5.32 * dbu)
        ym1[0] = int(ya0 - 0.39 * dbu)
        xm1[1] = int(xm1[0] + 1.05 * dbu)
        ym1[1] = ym1[0]
        xm1[2] = xm1[1]
        ym1[2] = ya1
        xm1[3] = int(xm1[1] - 0.15 * dbu)
        ym1[3] = ya1
        xm1[4] = xm1[3]
        ym1[4] = int(ya1 + 0.035 * dbu)
        xm1[5] = int(xm1[3] - 0.77 * dbu)
        ym1[5] = ym1[4]
        xm1[6] = xm1[5]
        ym1[6] = ya1
        xm1[7] = xm1[0]
        ym1[7] = ya1
        metal1 = cv.dbCreatePolygon(xm1, ym1, n_points, metal1_layer)
    for n in range(13) :
        n_points = 8
        xm2 = intarray(n_points)
        ym2 = intarray(n_points)
        xm2[0] = int(xa0 - 0.115 * dbu + n * 5.25 * dbu + (n - 1) * 0.07 * dbu)
        if (n==0) :
            xm2[0] = int(xa0 - 0.115 * dbu)
        ym2[0] = int(ya0 - 0.36 * dbu)
        xm2[1] = int(xm2[0] + 1.03 * dbu)
        if (n==0 or n==12) :
            xm2[1] = int(xm2[0] + 0.96 * dbu)
        ym2[1] = ym2[0]
        xm2[2] = xm2[1]
        ym2[2] = ya1
        xm2[3] = int(xm2[1] - 0.14 * dbu)
        if (n==12) :
            xm2[3] = int(xm2[1] - 0.07 * dbu)
        ym2[3] = ya1
        xm2[4] = xm2[3]
        ym2[4] = int(ya1 + 0.03 * dbu)
        xm2[5] = int(xm2[3] - 0.77 * dbu)
        ym2[5] = ym2[4]
        xm2[6] = xm2[5]
        ym2[6] = ya1
        xm2[7] = xm2[0]
        ym2[7] = ya1
        metal2 = cv.dbCreatePolygon(xm2, ym2, n_points, metal2_layer)
    #
    # Save results
    #
    cv.update()