#
# Import the db 
#
from ui import *
#
# The entry point
#
def schottky_nbl1(cv) :
    lib = cv.lib()
    tech = lib.tech()
    dbu = lib.dbuPerUU()
    #
    # Layer rules
    #
    contbar_width = int(0.3 * dbu)
    contbar_length = int(1 * dbu)
    salblock_en_contbar = int(0.45 * dbu)
    nsdblock_en_contbar = int(0.4 * dbu)
    pwellblock_en_contbar = int(0.25 * dbu)
    activ_en_contbar = int(0.07 * dbu)
    activ_en_cont = int(0.07 * dbu)
    cont_width = int(0.16 * dbu)
    cont_space = int(0.18 * dbu)
    activ_width = int(0.15 * dbu)
    metal1_en_cont = int(0.065 * dbu)
    nwell_en_nsd_activ = int(0.24 * dbu)
    #
    # Creating the device
    #
    layer = tech.getLayerNum("Cont", "drawing")
    r = Rect(0, 0, contbar_length, contbar_width)
    cont = cv.dbCreateRect(r, layer)
    layer = tech.getLayerNum("SalBlock", "drawing")
    xs0 = int(-salblock_en_contbar)
    ys0 = int(-salblock_en_contbar)
    xs1 = int(contbar_length + salblock_en_contbar)
    ys1 = int(contbar_width + salblock_en_contbar)
    r = Rect(xs0, ys0, xs1, ys1)
    salblock = cv.dbCreateRect(r, layer)
    layer = tech.getLayerNum("nSD", "block")
    x0 = int(-nsdblock_en_contbar)
    y0 = int(-nsdblock_en_contbar)
    x1 = int(contbar_length + nsdblock_en_contbar)
    y1 = int(contbar_width + nsdblock_en_contbar)
    r = Rect(x0, y0, x1, y1)
    nsdblock = cv.dbCreateRect(r, layer)
    layer = tech.getLayerNum("PWell", "block")
    x0 = int(-pwellblock_en_contbar)
    y0 = int(-pwellblock_en_contbar)
    x1 = int(contbar_length + pwellblock_en_contbar)
    y1 = int(contbar_width + pwellblock_en_contbar)
    r = Rect(x0, y0, x1, y1)
    pwellblock = cv.dbCreateRect(r, layer)
    a_layer = tech.getLayerNum("Activ", "drawing")
    m_layer = tech.getLayerNum("Metal1", "drawing")
    x0 = int(-activ_en_contbar)
    y0 = int(-activ_en_contbar)
    x1 = int(contbar_length + activ_en_contbar)
    y1 = int(contbar_width + activ_en_contbar)
    r = Rect(x0, y0, x1, y1)
    activ = cv.dbCreateRect(r, a_layer)
    metal1 = cv.dbCreateRect(r, m_layer)
    net = cv.dbCreateNet("A")
    pin = cv.dbCreatePin("A", net, DB_PIN_INOUT)
    cv.dbCreatePort(pin, metal1)
    xmpp = intarray(2)
    ympp = intarray(2)
    xmpp[0] = int(xs0 - activ_width / 2)
    ympp[0] = int(ys0 - activ_en_cont - cont_width / 2)
    xmpp[1] = int(xs1 + activ_width / 2)
    ympp[1] = ympp[0]
    a_path = cv.dbCreatePath(xmpp, ympp, 2, a_layer, int(2 * activ_en_cont + cont_width), 2, int(activ_width / 2), int(activ_width / 2))
    m_path = cv.dbCreatePath(xmpp, ympp, 2, m_layer, int(2 * metal1_en_cont+ cont_width), 0, 0, 0)
    net = cv.dbCreateNet("C")
    pin = cv.dbCreatePin("C", net, DB_PIN_INOUT)
    cv.dbCreatePort(pin, m_path)
    xmpp = intarray(2)
    ympp = intarray(2)
    xmpp[0] = int(xs1 + activ_width / 2)
    ympp[0] = int(ys0 - activ_en_cont - cont_width / 2)
    xmpp[1] = xmpp[0]
    ympp[1] = int(ys1 + activ_en_cont + cont_width / 2)
    a_path = cv.dbCreatePath(xmpp, ympp, 2, a_layer, int(activ_width), 2, int(activ_en_cont + cont_width / 2), int(activ_en_cont + cont_width / 2))
    xmpp = intarray(2)
    ympp = intarray(2)
    xmpp[0] = int(xs0 - activ_width / 2)
    ympp[0] = int(ys1 + activ_en_cont + cont_width / 2)
    xmpp[1] = int(xs1 + activ_width / 2)
    ympp[1] = ympp[0]
    a_path = cv.dbCreatePath(xmpp, ympp, 2, a_layer, int(2 * activ_en_cont + cont_width), 2, int(activ_width / 2), int(activ_width / 2))
    m_path = cv.dbCreatePath(xmpp, ympp, 2, m_layer, int(2 * metal1_en_cont+ cont_width), 0, 0, 0)
    net = cv.dbCreateNet("C")
    pin = cv.dbCreatePin("C", net, DB_PIN_INOUT)
    cv.dbCreatePort(pin, m_path)
    xmpp = intarray(2)
    ympp = intarray(2)
    xmpp[0] = int(xs0 - activ_width / 2)
    ympp[0] = int(ys0 - activ_en_cont - cont_width / 2)
    xmpp[1] = xmpp[0]
    ympp[1] = int(ys1 + activ_en_cont + cont_width / 2)
    a_path = cv.dbCreatePath(xmpp, ympp, 2, a_layer, int(activ_width), 2, int(activ_en_cont + cont_width / 2), int(activ_en_cont + cont_width / 2))
    layer = tech.getLayerNum("Cont", "drawing")
    n_cont = int(((xs1 + activ_width - activ_en_cont) - (xs0 - activ_width + activ_en_cont)) / (cont_width + cont_space))
    offset = int((((xs1 + activ_width - activ_en_cont) - (xs0 - activ_width + activ_en_cont)) - (n_cont * (cont_width + cont_space) - cont_space)) / 2)
    print(int(n_cont * (cont_width + cont_space) - cont_space))
    for n in range (n_cont) :
        xc0 = int(xs0 - activ_width + activ_en_cont + offset + n * (cont_width + cont_space))
        yc0 = int(ys0 - activ_en_cont)
        xc1 = int(xc0 + cont_width)
        yc1 = int(yc0 - cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, layer)
    for n in range (n_cont) :
        xc0 = int(xs0 - activ_width + activ_en_cont + offset + n * (cont_width + cont_space))
        yc0 = int(ys1 + activ_en_cont)
        xc1 = int(xc0 + cont_width)
        yc1 = int(yc0 + cont_width)
        r = Rect(xc0, yc0, xc1, yc1)
        cont = cv.dbCreateRect(r, layer)
    layer = tech.getLayerNum("NWell", "drawing")
    xn0 = int(xs0 - 2 * activ_en_cont - cont_width - nwell_en_nsd_activ)
    yn0 = int(ys0 - 2 * activ_en_cont - cont_width - nwell_en_nsd_activ)
    xn1 = int(xs1 + 2 * activ_en_cont + cont_width + nwell_en_nsd_activ)
    yn1 = int(ys1 + 2 * activ_en_cont + cont_width + nwell_en_nsd_activ)
    r = Rect(xn0, yn0, xn1, yn1)
    nwell = cv.dbCreateRect(r, layer)
    layer = tech.getLayerNum("Recog", "diode")
    r = Rect(xn0, yn0, xn1, yn1)
    recog = cv.dbCreateRect(r, layer)
    layer = tech.getLayerNum("nBuLay", "drawing")
    r = Rect(xn0, yn0, xn1, yn1)
    nbulay = cv.dbCreateRect(r, layer)
    #
    # Add device type
    #
    cv.dbAddProp("type", "dio")
    #
    # Save results
    #
    cv.update()